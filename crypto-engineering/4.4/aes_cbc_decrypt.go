package main

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"os"
)

// xxd -p -r key.hex |xxd -i
var key []byte = []byte{
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
}

// xxd -p -r ciphertext.hex |xxd -i
// iv is at beginning of ciphertext
var ciphertextWithIV []byte = []byte{
	0x87, 0xf3, 0x48, 0xff, 0x79, 0xb8, 0x11, 0xaf, 0x38, 0x57, 0xd6, 0x71,
	0x8e, 0x5f, 0x0f, 0x91, 0x7c, 0x3d, 0x26, 0xf7, 0x73, 0x77, 0x63, 0x5a,
	0x5e, 0x43, 0xe9, 0xb5, 0xcc, 0x5d, 0x05, 0x92, 0x6e, 0x26, 0xff, 0xc5,
	0x22, 0x0d, 0xc7, 0xd4, 0x05, 0xf1, 0x70, 0x86, 0x70, 0xe6, 0xe0, 0x17,
}

func main() {
	c, err := aes.NewCipher(key)
	if err != nil {
		fmt.Println("Error creating cipher.", err)
		os.Exit(1)
	}

	iv := ciphertextWithIV[0:c.BlockSize()]
	decrypter := cipher.NewCBCDecrypter(c, iv)

	ciphertext := ciphertextWithIV[c.BlockSize():]
	plaintext := make([]byte, len(ciphertext))
	decrypter.CryptBlocks(plaintext, ciphertext)
	_, err = os.Stdout.Write(plaintext)
	if err != nil {
		fmt.Println("Error writing plaintext.", err)
		os.Exit(1)
	}
}
